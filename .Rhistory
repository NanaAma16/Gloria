quarto install extension quarto-ext/fontawesome
# Fit the linear model
model <- lm(y ~ x)
# Extract the coefficient estimates and their standard errors
beta2_hat <- coef(model)[2]
se_beta2_lm <- summary(model)$coefficients[2, "Std. Error"]
# Compute the standard error using matrix commands
X <- cbind(1, x)
y_hat <- predict(model)
residuals <- y - y_hat
sigma_hat_squared <- sum(residuals^2) / (length(y) - 2)  # (n - p), where p is the number of coefficients including intercept
X_transpose_X_inv <- solve(t(X) %*% X)
se_beta2_matrix <- sqrt(sigma_hat_squared * X_transpose_X_inv[2, 2])
# Print the results
cat("OLS Estimator of beta2:", beta2_hat, "\n")
cat("Standard Error of beta2 (lm):", se_beta2_lm, "\n")
cat("Standard Error of beta2 (matrix):", se_beta2_matrix, "\n")
set.seed(123)
n <- 25
x <- rnorm(n,mean=0.0,sd=1.0)
beta0 <- 1
beta1 <- 0
## x is irrelevant in this model, the data generating process is as follows:
dgp <- beta0 + beta1*x
## The residual is heteroskedastic by construction
e <- x^2*rnorm(n,mean=0.0,sd=1.0)
y <- dgp + e
# Fit the linear model
model <- lm(y ~ x)
# Extract the coefficient estimates and their standard errors
beta2_hat <- coef(model)[2]
se_beta2_lm <- summary(model)$coefficients[2, "Std. Error"]
# Compute the standard error using matrix commands
X <- cbind(1, x)
y_hat <- predict(model)
residuals <- y - y_hat
sigma_hat_squared <- sum(residuals^2) / (length(y) - 2)  # (n - p), where p is the number of coefficients including intercept
X_transpose_X_inv <- solve(t(X) %*% X)
se_beta2_matrix <- sqrt(sigma_hat_squared * X_transpose_X_inv[2, 2])
# Print the results
cat("OLS Estimator of beta2:", beta2_hat, "\n")
cat("Standard Error of beta2 (lm):", se_beta2_lm, "\n")
cat("Standard Error of beta2 (matrix):", se_beta2_matrix, "\n")
library(car)
library(carData)
# Obtain White's heteroskedasticity-consistent covariance matrix
vcov_white <- hccm(model, type = "hc0")
# Extract the standard error of beta2 from the White's covariance matrix
se_beta2_white <- sqrt(vcov_white[2, 2])
cat("Standard Error of beta2 (White):", se_beta2_white, "\n")
library(plm)
load("murder.RData")
install.packages("carData")
